using PyCall
using PyPlot
np= pyimport("numpy")

sol= np.load("November17_TRBDF_111.npy")
T= np.load("November17_TRBDF_111_T.npy")
plt = pyimport("matplotlib.pyplot")

sqrt3= sqrt(3)
lenx = size(sol[1,:,1])[1]
Nu_e= 0.5*(sol[1,:,:] .+ sol[5,:,:] .+ (sol[10,:,:]/sqrt3))
aNu_e= 0.5*(sol[2,:,:] .+ sol[13,:,:] .+ (sol[18,:,:]/sqrt3))
Nu_mu= 0.5*(sol[1,:,:] .- sol[5,:,:] .+ (sol[10,:,:]/sqrt3))
aNu_mu= 0.5*(sol[2,:,:] .- sol[13,:,:] .+ (sol[18,:,:]/sqrt3))
Nu_s= 0.5*(sol[1,:,:] .- 2*(sol[10,:,:]/sqrt3))
aNu_s= 0.5*(sol[2,:,:] .- 2*(sol[18,:,:]/sqrt3))

# Nu_mu_norm, aNu_mu_norm = take_norm.([Nu_mu,aNu_mu])
f_veL = zeros(lenx,size(T)[1])
f_vmuL = zeros(lenx,size(T)[1])
f_ve_L = zeros(lenx,size(T)[1])
f_vmu_L = zeros(lenx,size(T)[1])
dpol_dt =zeros(20,lenx,size(T)[1])
v= zeros(16,lenx,size(T)[1])
pot_allv= zeros(16,lenx,size(T)[1])
# Nu_e=zeros(lenx,size(sol.t)[1])
# Nu_mu=zeros(lenx,size(sol.t)[1])
# aNu_e=zeros(lenx,size(sol.t)[1])
# aNu_mu=zeros(lenx,size(sol.t)[1])
for (index,j) in enumerate(T)
    # Nu_e[:,index],Nu_mu[:,index],aNu_e[:,index],aNu_mu[:,index] = equation(dpol_dt[:,:,index],sol[:,:,index],pot_allv,j)
    # dpol_dt[:,:,index] = equation(dpol_dt[:,:,index],pol_t[:,:,index],pot_allv,j)
    v[:,:,index] = vacuum_potential(j/(10^6))
    pot_allv[:,:,index] = v[:,:,index]
    # Nu_mu_norm, aNu_mu_norm = take_norm.([Nu_mu[:,index],aNu_mu[:,index]])
    f_veL[:,index],f_ve_L[:,index] = forward_v4e(j/(10^6),Nu_e[:,index],aNu_e[:,index],sol[19,1,index]*1e-10)
    f_vmuL[:,index],f_vmu_L[:,index] =forward_v(j/(10^6),Nu_mu[:,index],aNu_mu[:,index],sol[20,1,index]*1e-10)
    pot_allv[3,:,index] .+= (f_veL[:,index] .- f_vmuL[:,index])/2
    pot_allv[8,:,index] .+= (f_veL[:,index] .+ f_vmuL[:,index])/twoxsqrt3
end

# for (index,j) in enumerate(sol.t)
#     # plt.plot(x,Nu_mu[:,index])
#     # plt.plot(x,Nu_e[:,index])
#     # plt.plot(x,Nu_s[:,index])
#     # v[3,:,index]= v[3,:,index] .+ (- f_vmuL[:,index])/2
#     # v[8,:,index]= v[8,:,index] .+ (f_vmuL[:,index])/twoxsqrt3
# end
# plt.xlim(x[1],50)
# display(gcf())
# plt.close()
fig2,ax2 =plt.subplots(figsize=(10,7))
for i=1:lenx
    # ax2.plot(T,(Nu_e .+ aNu_e .+ Nu_mu .+ aNu_mu .+ Nu_s .+ aNu_s)[i,:] .-4, label="N_eff_TRBDF" )
    # ax2.semilogy(T,abs.(Nu_e[i,:]-aNu_e[i,:]),label="Nu_e")
    # # ax2.plot(T,aNu_e[i,:],label="aNu_e")
    # ax2.semilogy(T,abs.(Nu_mu[i,:]-aNu_mu[i,:]),label="Nu_mu")
    # # ax2.plot(T,aNu_mu[i,:],label="aNu_mu")
    # ax2.semilogy(T,abs.(Nu_s[i,:] -aNu_s[i,:]),label="Nu_s")
    # ax2.plot(T,aNu_s[i,:],label="aNu_s")
    # ax2.loglog(T,abs.(f_veL[i,:] .+ f_ve_L[i,:])/2,label = "V_med Nu_e")
    # ax2.loglog(T,abs.(f_vmuL[i,:] .+ f_vmu_L[i,:])/2,label = "V_med N_mu")
    ax2.loglog(T,abs.(f_veL[i,:] .- f_ve_L[i,:])/2,label = "V_L_e")
    ax2.loglog(T,abs.(f_vmuL[i,:] .- f_vmu_L[i,:])/2,label = "V_L_mu")
    ax2.loglog(T,abs.(v[3,i,:]), label="V_12")
    ax2.loglog(T,abs.(v[3,i,:] .+ v[8,i,:]*sqrt3), label="Vac_e")
    ax2.loglog(T,abs.(-v[3,i,:] .+ v[8,i,:]*sqrt3), label="Vac_mu")
    ax2.loglog(T,abs.(1.49851*(10^-6)*((T/10^6).^3) .* (sol[3,1,:] .- sol[11,1,:])), label="real V_eµ")
    ax2.loglog(T,abs.(1.49851*(10^-6)*((T/10^6).^3) .* (sol[4,1,:] .- sol[12,1,:])), label="imag V_eµ")
    # ax2.semilogy(sol.t,abs.(sol[8,i,:]))
    # ax2.semilogy(sol.t,abs.(sol[9,i,:]))
    # ax2.semilogy(sol.t,abs.(sol[10,i,:]))
    # ax2.loglog(T,abs.(pot_allv[3,i,:] .+ pot_allv[8,i,:]*sqrt3), label="Vac_e + Vmed")
    # ax2.loglog(T,abs.(-pot_allv[3,i,:] .+ pot_allv[8,i,:]*sqrt3), label="Vac_mu + V_med")
end
ax2.legend(fontsize=11)
ax2.set_yscale("symlog",linthresh=1e-17)
ax2.set_xlim(60e6,0.1e6)
ax2.set_ylabel("Different potentials", fontsize=20)
ax22 = fig2.add_axes((0.125,-0.175,0.775,0.3),sharex=ax2)
ax22.semilogx(T,Nu_e[1,:],label="Nu_e")
ax22.semilogx(T,Nu_mu[1,:],label="Nu_µ")
ax22.semilogx(T,Nu_s[1,:],label="Nu_s")
ax22.semilogx(T,aNu_e[1,:],label="aNu_e")
ax22.semilogx(T,aNu_mu[1,:],label="aNu_mu")
ax22.semilogx(T,aNu_s[1,:],label="aNu_s")
ax22.tick_params(axis="x",labelsize=15)
ax22.tick_params(axis="y",labelsize=15)
ax22.set_xlabel("Temperature (MeV)", fontsize=20)
ax22.set_ylabel("Nu population", fontsize=20)
ax22.legend(fontsize=10)
display(gcf())
plt.close()
# typeof(sol.t)
# pol_t= permutedims(np.load("august_track.npy"),[2,1,3])
# dpol_dt[:,:,50] = equation(dpol_dt[:,:,50],pol_t[:,:,50],pot_allv,sol.t[50])


# for i=1:lenx
#     # plt.semilogy(sol.t,abs.(0.5*(pol[1,i,:] .+ pol[5,i,:] .+ (pol[10,i,:]/sqrt(3))) - 0.5*(pol[2,i,:] .+ pol[13,i,:] .+ (pol[18,i,:]/sqrt(3)))))
#     # plt.semilogy(sol.t,abs.(0.5*(pol[1,i,:] .- pol[5,i,:] .+ (pol[10,i,:]/sqrt(3))) - 0.5*(pol[2,i,:] .- pol[13,i,:] .+ (pol[18,i,:]/sqrt(3)))))
#     plt.semilogy(T,abs.(sol[19,i,:])*1e-10)
#     plt.semilogy(T,abs.(sol[20,i,:])*1e-10)
# end
# # plt.yscale("symlog",linthreshy=1e-15)
# plt.xlim(60e6,1e6)
# display(gcf())
# plt.close()
# println("size:",size(sol.t))
